{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","RegExp","props","state","nombres","apellidos","edad","mensajeNombre","mensajeApellido","mensajeEdad","invalidNombre","invalidApellido","invalidEdad","onChange","bind","EnviarBasedeDatos","e","name","target","value","this","setState","console","log","document","getElementById","preventDefault","valido","JSON","stringify","formData","FormData","append","fetch","method","body","then","res","text","result","LimpiarFormulario","swal","icon","button","timer","className","Row","Col","xs","id","Form","onSubmit","FormGroup","Label","Input","type","invalid","FormFeedback","min","step","Button","color","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6ee31c05.chunk.js","sourcesContent":["\n\nimport React, { Component } from 'react';\nimport { Row, Col, Form, Input, Label, FormGroup ,Button,FormFeedback } from 'reactstrap';\nimport swal from 'sweetalert'; /* importando sweealert */\nimport './App.css';\n// expresiones regulares\nconst textoRegex =RegExp(/^[a-zA-Z, ,ÑñÁáÉéÍíÓóÚúÜü]+$/);\nconst telefonoRegex =RegExp(/^[0-9]{3}[-. ][0-9]{3}[-. ][0-9]{4}$/);\nconst correoRegex=RegExp(/^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})$/);\nconst passwordRegex=RegExp(/^(?=.*\\d)(?=.*[a-záéíóúüñ]).*[A-ZÁÉÍÓÚÜÑ]/)\nconst generoRegex = RegExp(/^[A-ZÑñÁÉÍÓÚÜ]{1}[a-záéíóúü]+$/)\nconst placaRegex=RegExp(/^[A-Z]{3}[- ][0-9]{3}$/)\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    // formulario\n    this.state={ // ==> es el estado del campo del formulario\n     nombres:'',  \n     apellidos:'',\n     edad:'',\n     // validaciones del formulario\n     mensajeNombre:'Valor invalido',\n     mensajeApellido:'',\n     mensajeEdad:'',\n     invalidNombre:false,\n     invalidApellido:false,\n     invalidEdad:false,\n    }\n    // ligar el evento onchange con el constructor\n    this.onChange=this.onChange.bind(this);\n    this.EnviarBasedeDatos=this.EnviarBasedeDatos.bind(this);\n  }\n\n  // se activa el evento cuyo método es onchange\n  // lo cual trae información del campo o valor\n\n  onChange(e){\n    let name= e.target.name;\n    let value=e.target.value; \n\n    this.setState({\n      [name]:value,\n    });\n    console.log(this.state); // mostrando en consola el cambio */\n  }\n\n  LimpiarFormulario(){\n        document.getElementById('nombre').value = '';\n        document.getElementById('apellido').value = '';\n        document.getElementById('edad').value = '';\n  }\n\n  EnviarBasedeDatos(e){\n    e.preventDefault();\n    //validando los campos\n    let valido =true;\n    if(this.state.nombres ===''){ // || this.state.nombres === textoRegex.test(this.state.nombres)\n        this.setState({\n          invalidNombre:true,\n          mensajeNombre:'El campo nombre es obligatorio',\n        });\n        valido=false;\n    }\n    if(this.state.apellidos===''){\n      this.setState({\n        invalidApellido:true,\n        mensajeApellido:'El campo apellido es obligatorio',\n      });\n      valido=false;\n    }\n    if(this.state.edad ===''){\n      this.setState({\n        invalidEdad:true,\n        mensajeEdad:'Indica tu edad',\n      });\n      valido=false;\n    }\n    if(valido){\n      console.log(\"Se envian los datos.\"+JSON.stringify(this.state));\n      var formData = new FormData();\n      formData.append(\"nombres\", this.state.nombres) // nombre_categoria es el nombre del atributo de la variable tabla categoria\n      formData.append(\"apellidos\", this.state.apellidos)\n      formData.append(\"edad\", this.state.edad)\n      const rutaServicio = \"https://pedrojm.000webhostapp.com/db_alumno/registraralumnos.php\";// registrarcat.php\n      fetch(rutaServicio, {\n        method: 'POST',\n        body: formData,\n    })\n        .then(\n            res => res.text()\n        )\n        .then(\n            (result) => {\n                console.log(result);\n                this.LimpiarFormulario();\n                swal(\n                  {\n                      text: \" Se registro el participante \" + this.state.nombres + \" .\",\n                      icon: \"success\",\n                      button: \"Ok\",\n                      timer: \"2000\",\n                  });\n            }\n        )\n    }\n  }\n  render() {\n\n    return (\n      <div className=\"container-fluid\">\n        <Row>\n           <Col xs=\"12\" id=\"titulo\" className=\"text-center\">\n              Formulario validaciones\n           </Col>\n        </Row>\n        <Row>\n          <Col xs=\"3\">\n               \n          </Col>\n          <Col xs=\"6\">\n            <h2>Registro de Participantes</h2>\n            <Form onSubmit={this.EnviarBasedeDatos}>\n              <FormGroup>\n                <Label>Nombres</Label>\n                <Input type=\"text\" id=\"nombre\" name=\"nombres\" value={this.state.nombres} onChange={this.onChange} invalid={this.state.invalidNombre} />    \n                <FormFeedback>{this.state.mensajeNombre}</FormFeedback>\n              </FormGroup>\n              <FormGroup>\n                <Label>Apellidos</Label>\n                <Input type=\"text\" id=\"apellido\" name=\"apellidos\" value={this.state.apellidos} onChange={this.onChange} invalid={this.state.invalidApellido}/>    \n                <FormFeedback>{this.state.mensajeApellido}</FormFeedback>\n              </FormGroup>\n              <FormGroup>\n                <Label>Edad</Label>\n                <Input type=\"number\" id=\"edad\" name=\"edad\" className=\"col-2\" value={this.state.edad} onChange={this.onChange} invalid={this.state.invalidEdad}  min='1' step='1'/>    \n                <FormFeedback>{this.state.mensajeEdad}</FormFeedback>\n              </FormGroup>\n              <FormGroup>\n               <Button color=\"success\">Guardar</Button>\n              </FormGroup>\n            </Form>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}